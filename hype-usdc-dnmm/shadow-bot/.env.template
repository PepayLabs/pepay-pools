# Shadow Bot Enterprise Configuration Template
# HYPE/USDC DNMM Simulation

# ==============================================================================
# NETWORK CONFIGURATION
# ==============================================================================

# Required: HyperEVM RPC endpoint
RPC_URL=https://hyperliquid-mainnet.g.alchemy.com/v2/YOUR-API-KEY

# Optional: DNMM pool contract address (loads config from chain)
# If not provided, uses default configuration values below
DNMM_POOL_ADDRESS=

# Required: Market key for HyperCore oracles (uint32)
MARKET_KEY_DEC=0x485950455f55534443ffffffffffffffffffffffffffffffffffffffffffffff

# HyperCore price decimals (usually 18)
HC_DECIMALS=18

# ==============================================================================
# ORACLE CONFIGURATION
# ==============================================================================

# Pyth Network contract address
PYTH_ADDR=0xe9d69CdD6Fe41e7B621B4A688C5D1a68cB5c8ADc

# Option 1: Direct pair feed (if available)
PYTH_PAIR_FEED_ID=

# Option 2: Derived from BASE/USD and QUOTE/USD
PYTH_BASE_FEED_ID=4279e31cc369bbcc2faf022b382b080e32a8e689ff20fbc530d2a603eb6cd98b    # HYPE/USD
PYTH_QUOTE_FEED_ID=eaa020c61cc479712813461ce153894a96a6c00b21ed0cfc2798d1f9a9e9c94a    # USDC/USD

# ==============================================================================
# SIMULATION PARAMETERS
# ==============================================================================

# Sampling interval in milliseconds (default: 5000ms = 5 seconds)
INTERVAL_MS=5000

# Output CSV file path
OUT_CSV=shadow_enterprise.csv

# Prometheus metrics port
PROM_PORT=9464

# ==============================================================================
# DECISION THRESHOLDS
# ==============================================================================

# Delta thresholds (in basis points)
ACCEPT_BPS=30                  # <= this: ACCEPT
SOFT_BPS=50                    # <= this: HAIR_CUT (soft reject with increased fees)
HARD_BPS=75                    # > this: REJECT

# Hysteresis frames for recovery from rejection state
HYSTERESIS_FRAMES=3            # Number of consecutive good frames needed to recover

# ==============================================================================
# ORACLE CONFIGURATION (defaults if DNMM_POOL_ADDRESS not provided)
# ==============================================================================

# Freshness limits
MAX_AGE_SEC=60                 # Maximum age for oracle prices
STALL_WINDOW_SEC=120          # Maximum staleness for EMA fallback

# Confidence caps (basis points)
CONF_CAP_BPS_SPOT=100          # Cap for spot trading mode
CONF_CAP_BPS_STRICT=80         # Cap for strict mode (RFQ)

# Divergence threshold
DIVERGENCE_BPS=75              # Max allowed HC vs Pyth divergence

# EMA fallback
ALLOW_EMA_FALLBACK=true        # Allow EMA as fallback when primary stale

# Confidence weights (sum should be ~10000)
CONF_WEIGHT_SPREAD_BPS=3000    # Weight for spread-based confidence
CONF_WEIGHT_SIGMA_BPS=4000     # Weight for volatility-based confidence
CONF_WEIGHT_PYTH_BPS=3000      # Weight for Pyth confidence

# Volatility EWMA lambda
SIGMA_EWMA_LAMBDA_BPS=100      # Lambda for sigma EWMA (100 = 1%)

# ==============================================================================
# INVENTORY CONFIGURATION
# ==============================================================================

# Inventory floor (minimum reserves to maintain)
INVENTORY_FLOOR_BPS=1000       # 10% floor

# Target base inventory (in WAD = 1e18)
INVENTORY_TARGET_BASE=10000000000000000000000    # 10,000 HYPE

# Recenter threshold
INVENTORY_RECENTER_PCT=500     # 5% deviation triggers recenter

# ==============================================================================
# FEE CONFIGURATION
# ==============================================================================

# Base fee
FEE_BASE_BPS=10                # 0.1% base fee

# Alpha (confidence-based fee component)
FEE_ALPHA_NUM=1                # Numerator for α
FEE_ALPHA_DENOM=100           # Denominator for α

# Beta (inventory-based fee component)
FEE_BETA_NUM=1                 # Numerator for β
FEE_BETA_DENOM=200            # Denominator for β

# Fee cap
FEE_CAP_BPS=100                # 1% maximum fee

# Fee decay rate
FEE_DECAY_RATE=10              # Decay rate per block

# ==============================================================================
# ADVANCED CONFIGURATION
# ==============================================================================

# Enable debug mode (verbose logging)
DEBUG=false

# Enable trade simulation
SIMULATE_TRADES=true
TRADE_PROBABILITY=0.1          # 10% chance per sample

# Data retention
MAX_HISTORY_SIZE=100           # Keep last N samples in memory

# ==============================================================================
# MONITORING & ALERTING
# ==============================================================================

# Alert thresholds
ALERT_DELTA_BPS=100           # Alert if delta exceeds this
ALERT_INVENTORY_DEV_BPS=2000  # Alert if inventory deviation exceeds this
ALERT_REJECT_DURATION_SEC=60  # Alert if rejection lasts longer than this

# Webhook for alerts (optional)
ALERT_WEBHOOK_URL=

# ==============================================================================
# NOTES
# ==============================================================================
#
# 1. The shadow bot simulates the full DNMM protocol logic including:
#    - Oracle price fetching (HyperCore + Pyth)
#    - EMA tracking and fallback logic
#    - Inventory management and deviation calculation
#    - Fee calculation (base + confidence + inventory components)
#    - Decision making with hysteresis
#    - Trade simulation for inventory changes
#
# 2. Metrics are exposed via Prometheus at http://localhost:${PROM_PORT}/metrics
#    Stats dashboard available at http://localhost:${PROM_PORT}/stats
#
# 3. All data is logged to CSV for analysis with columns:
#    - Timestamps and oracle prices
#    - Confidence components and total
#    - Inventory state and deviation
#    - Calculated fees
#    - Decision outcomes
#
# 4. To tune parameters:
#    - Run for several days to collect data
#    - Analyze histograms of delta_bps, spread_bps, conf_bps
#    - Adjust ACCEPT_BPS/SOFT_BPS/HARD_BPS for desired reject rate
#    - Fine-tune confidence weights based on market behavior
#
# 5. For production deployment:
#    - Set up proper monitoring with Grafana dashboards
#    - Configure alerts for critical metrics
#    - Implement log rotation for CSV files
#    - Consider using time-series database for metrics